{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/anycoder\/init(coder:)","title":"init(coder: any Coder<Output>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/anycoder\/decode(_:from:)","title":"func decode<T>(T.Type, from: Output) throws -> T","type":"method"},{"path":"\/documentation\/foundationextras\/anycoder\/encode(_:)","title":"func encode<T>(T) throws -> Output","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/anycoder\/json","title":"static var json: AnyCoder<Data>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/anycoder\/erasetoanycoder()","title":"func eraseToAnyCoder() -> AnyCoder<Self.Output>","type":"method"},{"path":"\/documentation\/foundationextras\/anycoder\/typed(to:)","title":"func typed<T>(to: T.Type) -> AnyTypedCoder<Self.Output, T>","type":"method"}],"path":"\/documentation\/foundationextras\/anycoder\/coder-implementations","title":"Coder Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/anycoder","title":"AnyCoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/init(coder:)","title":"convenience init(coder: any TypedCoder<Encoded, Decoded>)","type":"init"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/init(coder:type:)","title":"convenience init(coder: any Coder<Encoded>, type: Decoded.Type)","type":"init"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/init(encode:decode:)","title":"init(encode: (Decoded) throws -> Encoded, decode: (Encoded) throws -> Decoded)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/decode(from:)","title":"func decode(from: Encoded) throws -> Decoded","type":"method"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/encode(_:)","title":"func encode(Decoded) throws -> Encoded","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/base64string()","title":"func base64String() -> AnyTypedCoder<String, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/decorate(_:)","title":"func decorate<T>(any TypedCoder<T, Self.Encoded>) -> AnyTypedCoder<T, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/erasetoanytypedcoder()","title":"func eraseToAnyTypedCoder() -> AnyTypedCoder<Self.Encoded, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/anytypedcoder\/string(encoding:)","title":"func string(encoding: String.Encoding) -> AnyTypedCoder<String, Self.Decoded>","type":"method"}],"path":"\/documentation\/foundationextras\/anytypedcoder\/typedcoder-implementations","title":"TypedCoder Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/anytypedcoder","title":"AnyTypedCoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/base64coder\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/base64coder\/decode(from:)","title":"func decode(from: String) throws -> Base64Coder.Decoded","type":"method"},{"path":"\/documentation\/foundationextras\/base64coder\/encode(_:)","title":"func encode(Base64Coder.Decoded) throws -> Base64Coder.Encoded","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/base64coder\/decoded","title":"Base64Coder.Decoded","type":"typealias"},{"path":"\/documentation\/foundationextras\/base64coder\/encoded","title":"Base64Coder.Encoded","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/base64coder\/decorate(_:)","title":"func decorate<T>(any TypedCoder<T, Self.Encoded>) -> AnyTypedCoder<T, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/base64coder\/erasetoanytypedcoder()","title":"func eraseToAnyTypedCoder() -> AnyTypedCoder<Self.Encoded, Self.Decoded>","type":"method"}],"path":"\/documentation\/foundationextras\/base64coder\/typedcoder-implementations","title":"TypedCoder Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/base64coder","title":"Base64Coder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/init(coder:decorator:)","title":"init(coder: any TypedCoder<T, Decoded>, decorator: any TypedCoder<Encoded, T>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/decode(from:)","title":"func decode(from: Encoded) throws -> Decoded","type":"method"},{"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/encode(_:)","title":"func encode(Decoded) throws -> Encoded","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/base64string()","title":"func base64String() -> AnyTypedCoder<String, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/decorate(_:)","title":"func decorate<T>(any TypedCoder<T, Self.Encoded>) -> AnyTypedCoder<T, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/erasetoanytypedcoder()","title":"func eraseToAnyTypedCoder() -> AnyTypedCoder<Self.Encoded, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/string(encoding:)","title":"func string(encoding: String.Encoding) -> AnyTypedCoder<String, Self.Decoded>","type":"method"}],"path":"\/documentation\/foundationextras\/decoratingtypedcoder\/typedcoder-implementations","title":"TypedCoder Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/decoratingtypedcoder","title":"DecoratingTypedCoder","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecache\/config\/init(url:encode:decode:filemanager:)","title":"init(url: URL, encode: ((Key, Value) throws -> Data)?, decode: ((Data) throws -> (Key, Value))?, fileManager: FileManager)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecache\/config\/decode","title":"let decode: (Data) throws -> (Key, Value)","type":"property"},{"path":"\/documentation\/foundationextras\/filecache\/config\/encode","title":"let encode: (Key, Value) throws -> Data","type":"property"},{"path":"\/documentation\/foundationextras\/filecache\/config\/filemanager","title":"let fileManager: FileManager","type":"property"},{"path":"\/documentation\/foundationextras\/filecache\/config\/url","title":"let url: URL","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecache\/config\/default","title":"static var `default`: FileCache<Key, Value>.Config","type":"property"}],"path":"\/documentation\/foundationextras\/filecache\/config","title":"FileCache.Config","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecache\/init(initialvalues:id:config:)","title":"init(initialValues: [Key : Value], id: UUID, config: FileCache<Key, Value>.Config) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecache\/content","title":"var content: [Key : Value]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecache\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/foundationextras\/filecache\/insert(_:forkey:)","title":"func insert(Value, forKey: Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/filecache\/remove(forkey:)","title":"func remove(forKey: Key) throws -> Value","type":"method"},{"path":"\/documentation\/foundationextras\/filecache\/value(forkey:)","title":"func value(forKey: Key) throws -> Value","type":"method"}],"path":"\/documentation\/foundationextras\/filecache\/cache-implementations","title":"Cache Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/filecache","title":"FileCache","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestorage\/config-swift.struct\/init(url:keycoder:valuecoder:filemanager:)","title":"init(url: URL, keyCoder: AnyTypedCoder<String, Key>?, valueCoder: AnyCoder<Data>?, fileManager: FileManager)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestorage\/config-swift.struct\/url","title":"let url: URL","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestorage\/config-swift.struct\/default","title":"static var `default`: FileStorage<Key, Value>.Config","type":"property"}],"path":"\/documentation\/foundationextras\/filestorage\/config-swift.struct","title":"FileStorage.Config","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestorage\/init(config:)","title":"init(config: FileStorage<Key, Value>.Config)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestorage\/config-swift.property","title":"let config: FileStorage<Key, Value>.Config","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestorage\/content","title":"var content: [Self.Key : Self.Value]","type":"property"},{"path":"\/documentation\/foundationextras\/filestorage\/keys","title":"var keys: [Key]","type":"property"},{"path":"\/documentation\/foundationextras\/filestorage\/values","title":"var values: [Self.Value]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestorage\/clear()","title":"func clear() throws","type":"method"},{"path":"\/documentation\/foundationextras\/filestorage\/insert(value:for:)","title":"func insert(value: Value, for: Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/filestorage\/remove(for:)","title":"func remove(for: Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/filestorage\/update(value:for:)","title":"func update(value: Self.Value, for: Self.Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/filestorage\/value(for:)","title":"func value(for: Key) throws -> Value","type":"method"}],"path":"\/documentation\/foundationextras\/filestorage\/storage-implementations","title":"Storage Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/filestorage","title":"FileStorage","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/jsoncoder\/init(encoder:decoder:)","title":"init(encoder: JSONEncoder, decoder: JSONDecoder)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/jsoncoder\/decode(_:from:)","title":"func decode<T>(T.Type, from: Data) throws -> T","type":"method"},{"path":"\/documentation\/foundationextras\/jsoncoder\/encode(_:)","title":"func encode<T>(T) throws -> Data","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/jsoncoder\/output","title":"JSONCoder.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/jsoncoder\/erasetoanycoder()","title":"func eraseToAnyCoder() -> AnyCoder<Self.Output>","type":"method"},{"path":"\/documentation\/foundationextras\/jsoncoder\/typed(to:)","title":"func typed<T>(to: T.Type) -> AnyTypedCoder<Self.Output, T>","type":"method"}],"path":"\/documentation\/foundationextras\/jsoncoder\/coder-implementations","title":"Coder Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/jsoncoder","title":"JSONCoder","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorycache\/init(initialvalues:)","title":"init(initialValues: [Key : Value])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorycache\/content","title":"var content: [Key : Value]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorycache\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/foundationextras\/memorycache\/insert(_:forkey:)","title":"func insert(Value, forKey: Key)","type":"method"},{"path":"\/documentation\/foundationextras\/memorycache\/remove(forkey:)","title":"func remove(forKey: Key) throws -> Value","type":"method"},{"path":"\/documentation\/foundationextras\/memorycache\/value(forkey:)","title":"func value(forKey: Key) throws -> Value","type":"method"}],"path":"\/documentation\/foundationextras\/memorycache\/cache-implementations","title":"Cache Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/memorycache","title":"MemoryCache","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorage\/init(initialvalue:)","title":"init(initialValue: [Key : Value])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorage\/content","title":"var content: [Self.Key : Self.Value]","type":"property"},{"path":"\/documentation\/foundationextras\/memorystorage\/keys","title":"var keys: [Key]","type":"property"},{"path":"\/documentation\/foundationextras\/memorystorage\/values","title":"var values: [Self.Value]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorage\/clear()","title":"func clear() throws","type":"method"},{"path":"\/documentation\/foundationextras\/memorystorage\/insert(value:for:)","title":"func insert(value: Value, for: Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/memorystorage\/remove(for:)","title":"func remove(for: Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/memorystorage\/update(value:for:)","title":"func update(value: Self.Value, for: Self.Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/memorystorage\/value(for:)","title":"func value(for: Key) throws -> Value","type":"method"}],"path":"\/documentation\/foundationextras\/memorystorage\/storage-implementations","title":"Storage Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/memorystorage","title":"MemoryStorage","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/stringcoder\/init(encoding:)","title":"init(encoding: String.Encoding)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/stringcoder\/decode(from:)","title":"func decode(from: String) throws -> StringCoder.Decoded","type":"method"},{"path":"\/documentation\/foundationextras\/stringcoder\/encode(_:)","title":"func encode(StringCoder.Decoded) throws -> StringCoder.Encoded","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/stringcoder\/decoded","title":"StringCoder.Decoded","type":"typealias"},{"path":"\/documentation\/foundationextras\/stringcoder\/encoded","title":"StringCoder.Encoded","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/stringcoder\/decorate(_:)","title":"func decorate<T>(any TypedCoder<T, Self.Encoded>) -> AnyTypedCoder<T, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/stringcoder\/erasetoanytypedcoder()","title":"func eraseToAnyTypedCoder() -> AnyTypedCoder<Self.Encoded, Self.Decoded>","type":"method"}],"path":"\/documentation\/foundationextras\/stringcoder\/typedcoder-implementations","title":"TypedCoder Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/stringcoder","title":"StringCoder","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/cache\/key","title":"Key","type":"associatedtype"},{"path":"\/documentation\/foundationextras\/cache\/value","title":"Value","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/cache\/content","title":"var content: [Self.Key : Self.Value]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/cache\/clear()","title":"func clear()","type":"method"},{"path":"\/documentation\/foundationextras\/cache\/insert(_:forkey:)","title":"func insert(Self.Value, forKey: Self.Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/cache\/remove(forkey:)","title":"func remove(forKey: Self.Key) throws -> Self.Value","type":"method"},{"path":"\/documentation\/foundationextras\/cache\/value(forkey:)","title":"func value(forKey: Self.Key) throws -> Self.Value","type":"method"}],"path":"\/documentation\/foundationextras\/cache","title":"Cache","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/coder\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/coder\/erasetoanycoder()","title":"func eraseToAnyCoder() -> AnyCoder<Self.Output>","type":"method"},{"path":"\/documentation\/foundationextras\/coder\/typed(to:)","title":"func typed<T>(to: T.Type) -> AnyTypedCoder<Self.Output, T>","type":"method"}],"path":"\/documentation\/foundationextras\/coder","title":"Coder","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/storage\/key","title":"Key","type":"associatedtype"},{"path":"\/documentation\/foundationextras\/storage\/value","title":"Value","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/storage\/content","title":"var content: [Self.Key : Self.Value]","type":"property"},{"path":"\/documentation\/foundationextras\/storage\/keys","title":"var keys: [Self.Key]","type":"property"},{"path":"\/documentation\/foundationextras\/storage\/values","title":"var values: [Self.Value]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/storage\/clear()","title":"func clear() throws","type":"method"},{"path":"\/documentation\/foundationextras\/storage\/insert(value:for:)","title":"func insert(value: Self.Value, for: Self.Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/storage\/remove(for:)","title":"func remove(for: Self.Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/storage\/update(value:for:)","title":"func update(value: Self.Value, for: Self.Key) throws","type":"method"},{"path":"\/documentation\/foundationextras\/storage\/value(for:)","title":"func value(for: Self.Key) throws -> Self.Value","type":"method"}],"path":"\/documentation\/foundationextras\/storage","title":"Storage","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/typedcoder\/decoded","title":"Decoded","type":"associatedtype"},{"path":"\/documentation\/foundationextras\/typedcoder\/encoded","title":"Encoded","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/typedcoder\/base64string()","title":"func base64String() -> AnyTypedCoder<String, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/typedcoder\/decode(from:)","title":"func decode(from: Self.Encoded) throws -> Self.Decoded","type":"method"},{"path":"\/documentation\/foundationextras\/typedcoder\/decorate(_:)","title":"func decorate<T>(any TypedCoder<T, Self.Encoded>) -> AnyTypedCoder<T, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/typedcoder\/encode(_:)","title":"func encode(Self.Decoded) throws -> Self.Encoded","type":"method"},{"path":"\/documentation\/foundationextras\/typedcoder\/erasetoanytypedcoder()","title":"func eraseToAnyTypedCoder() -> AnyTypedCoder<Self.Encoded, Self.Decoded>","type":"method"},{"path":"\/documentation\/foundationextras\/typedcoder\/string(encoding:)","title":"func string(encoding: String.Encoding) -> AnyTypedCoder<String, Self.Decoded>","type":"method"}],"path":"\/documentation\/foundationextras\/typedcoder","title":"TypedCoder","type":"protocol"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/base64coderfailure\/invalidencoding","title":"case invalidEncoding","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/base64coderfailure\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/foundationextras\/base64coderfailure\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/base64coderfailure\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/foundationextras\/base64coderfailure\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/base64coderfailure","title":"Base64CoderFailure","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecachefailure\/insufficientpermissions","title":"case insufficientPermissions","type":"case"},{"path":"\/documentation\/foundationextras\/filecachefailure\/invalidcacheidfilewithequalnamealreadyexists","title":"case invalidCacheIdFileWithEqualNameAlreadyExists","type":"case"},{"path":"\/documentation\/foundationextras\/filecachefailure\/missingfileforkey","title":"case missingFileForKey","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecachefailure\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/foundationextras\/filecachefailure\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filecachefailure\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/foundationextras\/filecachefailure\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/filecachefailure","title":"FileCacheFailure","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/filealreadyexists","title":"case fileAlreadyExists","type":"case"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/filedoesnotexist","title":"case fileDoesNotExist","type":"case"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/invaliddirectory","title":"case invalidDirectory","type":"case"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/invalidencoding","title":"case invalidEncoding","type":"case"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/migrationfailed","title":"case migrationFailed","type":"case"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/readfailure","title":"case readFailure","type":"case"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/writefailure","title":"case writeFailure","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/foundationextras\/filestoragefailure\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/filestoragefailure\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/foundationextras\/filestoragefailure\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/filestoragefailure","title":"FileStorageFailure","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorycacheerror\/missingvalueforkey","title":"case missingValueForKey","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorycacheerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/foundationextras\/memorycacheerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorycacheerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/foundationextras\/memorycacheerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/memorycacheerror","title":"MemoryCacheError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorageerror\/keyalreadyexists","title":"case keyAlreadyExists","type":"case"},{"path":"\/documentation\/foundationextras\/memorystorageerror\/keydoesnotexist","title":"case keyDoesNotExist","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorageerror\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorageerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/foundationextras\/memorystorageerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorageerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/foundationextras\/memorystorageerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorageerror\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/memorystorageerror\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/foundationextras\/memorystorageerror\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/memorystorageerror","title":"MemoryStorageError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/stringcoderfailure\/invalidencoding(_:)","title":"case invalidEncoding(String.Encoding)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/stringcoderfailure\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/foundationextras\/stringcoderfailure\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/stringcoderfailure\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/foundationextras\/stringcoderfailure\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/foundationextras\/stringcoderfailure","title":"StringCoderFailure","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/foundation\/filemanager\/contents(at:)","title":"func contents(at: URL) -> Data?","type":"method"},{"path":"\/documentation\/foundationextras\/foundation\/filemanager\/contentsofdirectory(at:)","title":"func contentsOfDirectory(at: URL) throws -> [URL]","type":"method"},{"path":"\/documentation\/foundationextras\/foundation\/filemanager\/createfile(at:contents:attributes:)","title":"func createFile(at: URL, contents: Data?, attributes: [FileAttributeKey : Any]?) -> Bool","type":"method"},{"path":"\/documentation\/foundationextras\/foundation\/filemanager\/directoryexists(at:)","title":"func directoryExists(at: URL) -> Bool","type":"method"},{"path":"\/documentation\/foundationextras\/foundation\/filemanager\/directoryexists(atpath:)","title":"func directoryExists(atPath: String) -> Bool","type":"method"},{"path":"\/documentation\/foundationextras\/foundation\/filemanager\/fileexists(at:)","title":"func fileExists(at: URL) -> Bool","type":"method"}],"path":"\/documentation\/foundationextras\/foundation\/filemanager","title":"FileManager","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/foundation\/userdefaults\/get(for:)","title":"func get<Key, T>(for: Key) -> T?","type":"method"},{"path":"\/documentation\/foundationextras\/foundation\/userdefaults\/get(for:default:)","title":"func get<Key, T>(for: Key, default: T) -> T","type":"method"},{"path":"\/documentation\/foundationextras\/foundation\/userdefaults\/set(_:for:)","title":"func set<Key, T>(T, for: Key)","type":"method"}],"path":"\/documentation\/foundationextras\/foundation\/userdefaults","title":"UserDefaults","type":"extension"}],"path":"\/documentation\/foundationextras\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/swift\/duration\/init(seconds:)","title":"init(seconds: Double)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/foundationextras\/swift\/duration\/seconds","title":"var seconds: Double","type":"property"}],"path":"\/documentation\/foundationextras\/swift\/duration","title":"Duration","type":"extension"}],"path":"\/documentation\/foundationextras\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/foundationextras","title":"FoundationExtras","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}